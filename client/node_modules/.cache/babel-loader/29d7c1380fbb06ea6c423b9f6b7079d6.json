{"ast":null,"code":"var _jsxFileName = \"F:\\\\React\\\\FinalProject-main\\\\client\\\\src\\\\ProtectedRoutes\\\\LoginRoute.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route, Navigate, Outlet } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst checkAuth = async () => {\n  const token = localStorage.getItem('token');\n\n  if (token) {\n    try {\n      const response = await fetch('http://localhost:5000/api/check-user', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n\n      if (response.ok) {\n        const data = await response.json();\n        return data.isUser;\n      }\n    } catch (error) {\n      console.error('Error checking user status:', error);\n    }\n  }\n\n  return false; // Return false if no token or if any error occurs\n};\n\nconst LoginRoute = _ref => {\n  _s();\n\n  let {\n    element: Element,\n    ...rest\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      const isUserAuthenticated = await checkAuth();\n      setIsAuthenticated(isUserAuthenticated);\n    };\n\n    checkAuthentication();\n  }, []);\n\n  if (isAuthenticated === null) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n\n  return isAuthenticated ? /*#__PURE__*/_jsxDEV(Element, { ...rest\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 28\n  }, this) : /*#__PURE__*/_jsxDEV(Navigate, {\n    to: \"/login\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 52\n  }, this);\n};\n\n_s(LoginRoute, \"ZTMIcZ3KFUL4S6fmpEYhW5p5Z1I=\");\n\n_c = LoginRoute;\nexport default LoginRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginRoute\");","map":{"version":3,"sources":["F:/React/FinalProject-main/client/src/ProtectedRoutes/LoginRoute.jsx"],"names":["React","useEffect","useState","Route","Navigate","Outlet","checkAuth","token","localStorage","getItem","response","fetch","method","headers","ok","data","json","isUser","error","console","LoginRoute","element","Element","rest","isAuthenticated","setIsAuthenticated","checkAuthentication","isUserAuthenticated"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,kBAAxC;;;AAEA,MAAMC,SAAS,GAAG,YAAY;AAC5B,QAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,MAAIF,KAAJ,EAAW;AACT,QAAI;AACF,YAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAD,EAAyC;AACnEC,QAAAA,MAAM,EAAE,MAD2D;AAEnEC,QAAAA,OAAO,EAAE;AACP,2BAAkB,UAASN,KAAM;AAD1B;AAF0D,OAAzC,CAA5B;;AAMA,UAAIG,QAAQ,CAACI,EAAb,EAAiB;AACf,cAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAnB;AACA,eAAOD,IAAI,CAACE,MAAZ;AACD;AACF,KAXD,CAWE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACD,KAAR,CAAc,6BAAd,EAA6CA,KAA7C;AACD;AACF;;AACD,SAAO,KAAP,CAlB4B,CAkBd;AACf,CAnBD;;AAqBA,MAAME,UAAU,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,OAAO,EAAEC,OAAX;AAAoB,OAAGC;AAAvB,GAAkC;AACpD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCvB,QAAQ,CAAC,IAAD,CAAtD;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMyB,mBAAmB,GAAG,YAAY;AACtC,YAAMC,mBAAmB,GAAG,MAAMrB,SAAS,EAA3C;AACAmB,MAAAA,kBAAkB,CAACE,mBAAD,CAAlB;AACD,KAHD;;AAKAD,IAAAA,mBAAmB;AACpB,GAPQ,EAON,EAPM,CAAT;;AAQA,MAAIF,eAAe,KAAK,IAAxB,EAA8B;AAC5B,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,SAAOA,eAAe,gBAAG,QAAC,OAAD,OAAaD;AAAb;AAAA;AAAA;AAAA;AAAA,UAAH,gBAA2B,QAAC,QAAD;AAAU,IAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,UAAjD;AACD,CAfD;;GAAMH,U;;KAAAA,U;AAiBN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route, Navigate, Outlet } from 'react-router-dom';\n\nconst checkAuth = async () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    try {\n      const response = await fetch('http://localhost:5000/api/check-user', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        return data.isUser;\n      }\n    } catch (error) {\n      console.error('Error checking user status:', error);\n    }\n  }\n  return false; // Return false if no token or if any error occurs\n};\n\nconst LoginRoute = ({ element: Element, ...rest }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(null);\n\n  useEffect(() => {\n    const checkAuthentication = async () => {\n      const isUserAuthenticated = await checkAuth();\n      setIsAuthenticated(isUserAuthenticated);\n    };\n\n    checkAuthentication();\n  }, []); \n  if (isAuthenticated === null) {\n    return <div>Loading...</div>;\n  }\n  return isAuthenticated ? <Element {...rest} /> : <Navigate to=\"/login\" />;\n};\n\nexport default LoginRoute;\n"]},"metadata":{},"sourceType":"module"}