{"ast":null,"code":"var _jsxFileName = \"F:\\\\React\\\\FinalProject-main\\\\client\\\\src\\\\ProtectedRoutes\\\\CheckingRoute.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CheckingRoute = _ref => {\n  _s();\n\n  let {\n    element: Element,\n    ...rest\n  } = _ref;\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        try {\n          const response = await axios.post('http://localhost:5000/api/check-admin', null, {\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n\n          if (response.status === 200) {\n            const data = response.data;\n            setIsAdmin(data.isAdmin);\n          }\n\n          setIsAuthenticated(true);\n        } catch (error) {\n          console.error('Error checking admin status:', error);\n        }\n      }\n    };\n\n    checkAuth();\n  }, []);\n\n  if (!isAuthenticated) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  }\n\n  if (isAdmin) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/admin\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 12\n    }, this);\n  }\n};\n\n_s(CheckingRoute, \"wqYoM5Zkli0xb0Rjmti0YIIgN1M=\");\n\n_c = CheckingRoute;\nexport default CheckingRoute;\n\nvar _c;\n\n$RefreshReg$(_c, \"CheckingRoute\");","map":{"version":3,"sources":["F:/React/FinalProject-main/client/src/ProtectedRoutes/CheckingRoute.jsx"],"names":["React","useEffect","useState","Route","Navigate","axios","CheckingRoute","element","Element","rest","isAuthenticated","setIsAuthenticated","isAdmin","setIsAdmin","checkAuth","token","localStorage","getItem","response","post","headers","Authorization","status","data","error","console"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;;AAEA,MAAMC,aAAa,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAAEC,IAAAA,OAAO,EAAEC,OAAX;AAAoB,OAAGC;AAAvB,GAAkC;AACvD,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,KAAD,CAAtC;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,SAAS,GAAG,YAAY;AAC5B,YAAMC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAIF,KAAJ,EAAW;AACT,YAAI;AACF,gBAAMG,QAAQ,GAAG,MAAMb,KAAK,CAACc,IAAN,CACrB,uCADqB,EAErB,IAFqB,EAGrB;AACEC,YAAAA,OAAO,EAAE;AACPC,cAAAA,aAAa,EAAG,UAASN,KAAM;AADxB;AADX,WAHqB,CAAvB;;AASA,cAAIG,QAAQ,CAACI,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,kBAAMC,IAAI,GAAGL,QAAQ,CAACK,IAAtB;AACAV,YAAAA,UAAU,CAACU,IAAI,CAACX,OAAN,CAAV;AACD;;AACDD,UAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,SAfD,CAeE,OAAOa,KAAP,EAAc;AACdC,UAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACD;AACF;AACF,KAtBD;;AAuBAV,IAAAA,SAAS;AACV,GAzBQ,EAyBN,EAzBM,CAAT;;AA2BA,MAAI,CAACJ,eAAL,EAAsB;AACpB,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,MAAIE,OAAJ,EAAa;AACX,wBAAO,QAAC,QAAD;AAAU,MAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;AACF,CArCD;;GAAMN,a;;KAAAA,a;AAuCN,eAAeA,aAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Route, Navigate } from 'react-router-dom';\nimport axios from 'axios';\n\nconst CheckingRoute = ({ element: Element, ...rest }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  useEffect(() => {\n    const checkAuth = async () => {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          const response = await axios.post(\n            'http://localhost:5000/api/check-admin',\n            null,\n            {\n              headers: {\n                Authorization: `Bearer ${token}`,\n              },\n            }\n          );\n          if (response.status === 200) {\n            const data = response.data;\n            setIsAdmin(data.isAdmin);\n          }\n          setIsAuthenticated(true);\n        } catch (error) {\n          console.error('Error checking admin status:', error);\n        }\n      }\n    };\n    checkAuth();\n  }, []);\n\n  if (!isAuthenticated) {\n    return <Navigate to=\"/\" />;\n  }\n  if (isAdmin) {\n    return <Navigate to=\"/admin\" />;\n  }\n};\n\nexport default CheckingRoute;\n"]},"metadata":{},"sourceType":"module"}